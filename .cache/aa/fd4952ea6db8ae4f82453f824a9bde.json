{"id":"../node_modules/@pixi/assets/lib/_virtual/loadImageBitmap.worker.mjs","dependencies":[{"name":"/Users/marvin/Projects/runandjump/node_modules/@pixi/assets/lib/_virtual/loadImageBitmap.worker.mjs.map","includedInParent":true,"mtime":1707171147769},{"name":"/Users/marvin/Projects/runandjump/package.json","includedInParent":true,"mtime":1707171910916},{"name":"/Users/marvin/Projects/runandjump/node_modules/@pixi/assets/package.json","includedInParent":true,"mtime":1707171147760}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst WORKER_CODE = `(function() {\n  \"use strict\";\n  async function loadImageBitmap(url) {\n    const response = await fetch(url);\n    if (!response.ok)\n      throw new Error(\\`[WorkerManager.loadImageBitmap] Failed to fetch \\${url}: \\${response.status} \\${response.statusText}\\`);\n    const imageBlob = await response.blob();\n    return await createImageBitmap(imageBlob);\n  }\n  self.onmessage = async (event) => {\n    try {\n      const imageBitmap = await loadImageBitmap(event.data.data[0]);\n      self.postMessage({\n        data: imageBitmap,\n        uuid: event.data.uuid,\n        id: event.data.id\n      }, [imageBitmap]);\n    } catch (e) {\n      self.postMessage({\n        error: e,\n        uuid: event.data.uuid,\n        id: event.data.id\n      });\n    }\n  };\n})();\n`;\nlet WORKER_URL = null;\nclass WorkerInstance extends Worker {\n  constructor() {\n    WORKER_URL || (WORKER_URL = URL.createObjectURL(new Blob([WORKER_CODE], {\n      type: \"application/javascript\"\n    }))), super(WORKER_URL);\n  }\n}\nexports.default = WorkerInstance;\nWorkerInstance.revokeObjectURL = function () {\n  WORKER_URL && (URL.revokeObjectURL(WORKER_URL), WORKER_URL = null);\n};"},"sourceMaps":{"js":{"mappings":[],"sources":{},"lineCount":null}},"error":null,"hash":"9bd0b1bea25807d86a9a4f0718106b6b","cacheData":{"env":{}}}